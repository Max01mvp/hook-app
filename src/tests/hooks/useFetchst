import { renderHook } from '@testing-library/react';
import { useFetch } from '../../hooks/useFetch';


describe('Pruebas en useFetch', () => {


    test('debe de retornar la informacion por defecto', () => {


        const { result } = renderHook( () => useFetch('https://www.breakingbadapi.com/api/quotes/${ counter }'))

        const { data, loading, error } = result.current;
        expect( data ).toBe(null);
        expect( loading ).toBe(true);
        expect( error ).toBe(null);
        

    });

    test('debe de tener la info deseada, loading false, error false', async() => {
    
        const { result, waitForNextUpdate } = renderHook( () => useFetch('https://www.breakingbadapi.com/api/quotes/${ counter }'))

        await waitForNextUpdate(); //error en los tests sobre wait

        const { data, loading, error } = result.current;

        expect( data.length ).toBe(2);
        expect( loading ).toBe(false);
        expect( error ).toBe(null);
        
        
})

    test('debe de manejar el error', async() => {
    
        const { result, waitForNextUpdate } = renderHook( () => useFetch('https://reqres.in/api/users?page=2'))

        await waitForNextUpdate(); //error en los tests sobre wait

        const { data, loading, error } = result.current;

        expect( data ).toBe(null);
        expect( loading ).toBe(false);
        expect( error ).toBe('No se pudo cargar la info');
    
    
})

    //nombre del archivo corregir para intentar pruebas useFetch.test.js

})